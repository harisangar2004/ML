ITERATIVE HOST
-------------------------------------------------------------------
#include<unistd.h>                                                                                                                          

#include <stdio.h>                                                                                                                          

#include <string.h>                                                                                                                         

#include <stdlib.h>                                                                                                                         

#include <arpa/inet.h>                                                                                                                      

#include <sys/socket.h>                                                                                                                     

#define HOST_PORT 4567                                                                                                                      

#define BUFFER_SIZE 1024                                                                                                                    

char* resolve_ip_authoritatively(char *domain) {                                                                                            

        if (strcmp(domain, "openai.com") == 0) return "13.107.213.40";                                                                      

        if (strcmp(domain, "microsoft.com") == 0) return "20.81.111.85";                                                                    

        return "0.0.0.0";                                                                                                                   

}                                                                                                                                           

int main() {                                                                                                                                

        int sock;                                                                                                                           

        struct sockaddr_in host_addr, mediator_addr;                                                                                        

        char buffer[BUFFER_SIZE];                                                                                                           

        socklen_t len = sizeof(mediator_addr);                                                                                              

        if ((sock = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {                                                                                  

                perror("Socket creation failed");                                                                                           

                exit(EXIT_FAILURE);                                                                                                         

        }                                                                                                                                   

        memset(&host_addr, 0, sizeof(host_addr));                                                                                           

        host_addr.sin_family = AF_INET;                                                                                                     

        host_addr.sin_port = htons(HOST_PORT);                                                                                              

        host_addr.sin_addr.s_addr = INADDR_ANY;                                                                                             

        if (bind(sock, (const struct sockaddr *) &host_addr, sizeof(host_addr)) < 0) {                                                      

                perror("Bind failed");                                                                                                      

                close(sock);                                                                                                                

                exit(EXIT_FAILURE);                                                                                                         

        }                                                                                                                                   

        while (1) {                                                                                                                         

                memset(buffer, 0, BUFFER_SIZE);                                                                                             

                recvfrom(sock, buffer, BUFFER_SIZE, 0, (struct sockaddr *) &mediator_addr, &len);                                           

                buffer[strlen(buffer)] = '\0';                                                                                              

                printf("Request for domain (authoritative): %s\n", buffer);                                                                 

                char *ip = resolve_ip_authoritatively(buffer);                                                                              

                sendto(sock, ip, strlen(ip), 0, (struct sockaddr *) &mediator_addr, len);                                                   

                printf("IP %s sent to mediator.\n", ip);                                                                                    

        }                                                                                                                                   

        close(sock);                                                                                                                        

        return 0;                                                                                                                           

}
